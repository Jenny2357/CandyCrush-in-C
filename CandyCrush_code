#include <stdio.h>
#include <stdlib.h>

#define H 6
#define W 6

char candies[] = {'*', '#', '@', '%'};

int initGameBoardFromFile(int board[][W], int stacks[]);
void printGameBoard(int board[][W]);
int askForSwap(int board[][W]);
void swap(int board[][6], int row1, int col1, int row2, int col2);
int findAndRemoveMatch(int board[][W], int row, int col);
int isMatching(int board[6][6], int row, int col);
int isGameOver(int board[][W]);
void applyGravity(int board[][6]);
int fillEmpty(int board[][W], int stacks[], int current, int numCandies);
int cascade(int board[][6], int cas);

int initGameBoardFromFile(int board[][W], int stacks[]) {
    int row, col, st,i;
    FILE *bd;/**/
    bd = fopen("board.txt", "r");
    if (bd == NULL) {
        printf("Failed to open board.txt!\n");
        exit(1);
    }

    for (row = 0; row < H; row++) {
        for (col = 0; col < W; col++) {
            fscanf(bd, "%d", &board[row][col]);
        }
    }// Read board values

    fscanf(bd, "%d", &st);//read stacks size

    for (i=0; i<st; i++) {
        fscanf(bd, "%d", &stacks[i]);
    }//read stacks values
    fclose(bd);
    return 0;
}

void printGameBoard(int board[][W]) {
    printf("=====\n");//apart each step
    int i,j;
    printf("  | 0 | 1 | 2 | 3 | 4 | 5 |\n");//col num
    for ( i = 0; i < H; i++) {
        printf(" %d|", i);//row num
        for (j = 0; j < W; j++) {
            if (board[i][j]==  - 1) {printf("   |");}//print empty cells
            else printf(" %c |", candies[board[i][j]]);//print candies
        }
        printf("\n");//new line
    }
}

int askForSwap(int board[][W]) {
    int row, col;
    int i,j;
    char direction;

    printf("Enter the coordinate (row, column) of the candy: ");
    scanf("%d %d", &row, &col);

    if (row < 0 || row >= H || col < 0 || col >= W) {
        printf("Coordinates Out of Bound.\n");
        return 0;
    }//cell out of board
    if (board[row][col] == -1) {
        printf("Empty Cell Selected.\n");
        return 0;
    }//empty cell

    printf("Enter the direction to swap (U for Up, D for Down, L for Left, R for Right): ");
    scanf(" %c", &direction);
    int targetRow = row, targetCol = col;
    if (direction == 'U') targetRow--;
    else if (direction == 'D') targetRow++;
    else if (direction == 'L') targetCol--;
    else if (direction == 'R') targetCol++;//determine target by direction
    else {
        printf("Wrong Direction Input.\n");//mistype
        return 0;
    }

    if (targetRow < 0 || targetRow >= H || targetCol < 0 || targetCol >= W) {
        printf("Move Out of Bound.\n");
        return 0;
    }//target cell out of board
    if (board[targetRow][targetCol] == -1) {
        printf("Empty Cell Selected.\n");
        return 0;
    }//empty target cell

    swap(board, row, col, targetRow, targetCol);//swap
    i=findAndRemoveMatch(board, targetRow, targetCol);//save results in i&j
    j=findAndRemoveMatch(board, row, col);

    if (!i &&!j) {
        printGameBoard(board);
        swap(board, targetRow, targetCol, row, col);//undo 97
        printf("No Match found!\n");
        return 0;
    }

    return 1;
}

void swap(int board[][6], int row1, int col1, int row2, int col2) {
    int temp = board[row1][col1];
    board[row1][col1] = board[row2][col2];
    board[row2][col2] = temp;
}

int findAndRemoveMatch(int board[][W], int row, int col) {
    int matchFound = 0;
    int i,j,copy;
    int u,d,l,r;
    int h,v;
    //debug printf("%d %d [%d]\n", row,col,board[row][col]);
    if(board[row][col] != -1) {
        copy=board[row][col];u=d=row;l=r=col;
        for (i = row; i >= 0; i--) {
            if (board[i][col] != copy) {
                u=i+1;break;
            }if(i == 0) {u=0;}}//upward search
        for (i = row; i <H; i++) {
            if (board[i][col] != copy) {
                d=i-1; break;
            }if(i == 5) {d=5;}}//downward search
        for (j = col; j >= 0; j--) {
            if (board[row][j] != copy) {
                l=j+1;break;
            }if(j == 0) {l=0;}}//left search
        for (j = col; j <W; j++) {
            if (board[row][j] != copy) {
                r=j-1;break;
            }if(j == 5) {r=5;}}//right search

        v=d-u+1;//vertical match count
        h=r-l+1;//horizontal match count
        //debug printf("%d %d %d %d %d %d",u,d,l,r,v,h);

        if(h>=3) {
            printf("Horizontal Match found at row %d!\n", row);
            matchFound=1;
            for(i=l; i<=r; i++) {
                board[row][i]=-1;
            }
        }//horizontal found & remove
        if(v>=3) {
            printf("Vertical Match found at column %d!\n", col);
            matchFound=1;
            for(i=u; i<=d; i++) {
                board[i][col]=-1;
            }
        }
    }//vertical found & remove
    return matchFound;
}

int isMatching(int board[6][6], int row, int col) {//call in game over
    int center=-1;
    center=board[row][col];
    //u
    if(board[row-1][col] != -1&&row>=1) {
       if(board[row-1][col-1]==center&&board[row-1][col+1]==center){return 0;}
        if(board[row-1][col-1]==center&&board[row-1][col-2]==center&&col>=2){return 0;}
        if(board[row-1][col+1]==center&&board[row-1][col+2]==center&&col<=3){return 0;}
        if(board[row-2][col]==center&&board[row-3][col]==center&&row>=3){return 0;}
    }
    //l
    if(board[row][col-1] != -1&&col>=1) {
        if(board[row-1][col-1]==center&&board[row+1][col-1]==center){return 0;}
        if(board[row+1][col-1]==center&&board[row+2][col-1]==center&&row<=3){return 0;}
        if(board[row-2][col-1]==center&&board[row-1][col-1]==center&&row>=2){return 0;}
        if(board[row][col-2]==center&&board[row][col-3]==center&&col>=3){return 0;}
    }
    //d
    if(board[row+1][col] != -1&&row<=4) {
        if(board[row+1][col-1]==center&&board[row+1][col+1]==center){return 0;}
        if(board[row+1][col+1]==center&&board[row+1][col+2]==center&&col<=3){return 0;}
        if(board[row+1][col-1]==center&&board[row+1][col-2]==center&&col>=2){return 0;}
        if(board[row+2][col]==center&&board[row+3][col]==center&&row<=2){return 0;}
    }
    //r
    if(board[row][col+1] != -1&&col<=4) {
        if(board[row-1][col+1]==center&&board[row+1][col+1]==center){return 0;}
        if(board[row-1][col+1]==center&&board[row-2][col+1]==center&&row>=2){return 0;}
        if(board[row+1][col+1]==center&&board[row+2][col+1]==center&&row<=3){return 0;}
        if(board[row][col+2]==center&&board[row][col+3]==center&&col<=2){return 0;}
    }
    return 1;
}

void applyGravity(int board[][6]) {
    int row=1, col=1;
    int temp,i;
    for(i=0;i<5;i++){
        for (col = W-1; col >=0; col--) {
            for (row = H-1; row >=0; row--) {
                if (board[row][col] == -1) {
                    if (row-1>=0) {
                        temp=board[row][col];board[row][col]=board[row-1][col];board[row-1][col]=temp;
                    }
                }
            }}}//swap the empty cells to top
    printGameBoard(board);
}

int fillEmpty(int board[][W], int stacks[], int current, int numCandies) {
    int row=1, col=1;numCandies=0;
    int t=0,i=0;
    for(i=0;i<100;i++) {
        if (stacks[i] == 0&&stacks[i+1]==0&&stacks[i+2]==0) {t=i;break;}
        if (i==99) {t=99;}
    }//get the size of stacks[]
    for(col=0; col<W; col++) {
        for(row=H-1; row>=0; row--) {
            if (board[row][col] == -1) {
                numCandies++;
            }}}//debug printf("%d \n",numCandies);
    if(numCandies<=(t+1-current)) {
        for(col=0; col<W; col++) {
            for(row=H-1; row>=0; row--) {
                if (board[row][col] == -1) {
                    board[row][col]=stacks[current];
                    //debug printf("%d ",stacks[current]);
                    current++;}}}
    }
    else {printf("No more candies available.\n");return 101;}
    return current;//pass current to main
}

int cascade(int board[][6],int cas) {
    int row=0, col=0; cas=0;//initial cas to 0
    for(row=0; row<H; row++) {
        for(col=0; col<W; col++) {
            cas+=findAndRemoveMatch(board, row, col);
        }//check all  non-empty cells l to r - u to d
    }
    if(cas>0) {printf("Cascade Matches found!\n");}
    return cas;
}

int isGameOver(int board[][W]) {
    int row=0;
    int col=0;
    for ( row = 0; row < H; row++) {
        for (col = 0; col < W; col++) {
            if (board[row][col] != -1) {
                if(isMatching(board,row,col)==0)return 0;
            }//no possible move
        }
    }
    return 1;
}

int main(void) {
    int board[H][W] = {0};// The game board
    int stacks[100] = {0};// Stacks array containing candy, Maximum capacity 100
    int numCandies = 0;//num of candies to fill
    int cas = 0;//cascade
    int current = 0; //num of candies used
    int i;//save the value of askForSwap(board)
    initGameBoardFromFile(board,stacks);

    while (1) {
        printf("=====\n");
        printf("New Round:\n");
        printGameBoard(board);
        i=askForSwap(board);
        if (i==0)printf("Please try again.\n");
        if(i==1){
            printGameBoard(board);
            applyGravity(board);
            current=fillEmpty(board,stacks,current,numCandies);
            printGameBoard(board);
            while(cascade(board,cas)){
                applyGravity(board);
                current=fillEmpty(board,stacks,current,numCandies);
                if(current==101)break;
                printGameBoard(board);}
        }//if i==2 just print one sentence inside aFS
        if (isGameOver(board)) {
            printf("Game Over! No more possible moves.\n");
            break;
        }
    }

    return 0;
}


